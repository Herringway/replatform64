module replatform64.backend.common.inputconstants;

enum Controller {
	up,
	down,
	left,
	right,
	l,
	r,
	select,
	start,
	a,
	b,
	x,
	y,
	extra1,
	extra2,
	extra3,
	extra4,
	fastForward,
	pause,
	skipFrame,
	exit
}

enum AxisMapping {
	upDown,
	leftRight,
	l,
	r,
	select,
	start,
	a,
	b,
	x,
	y,
	extra1,
	extra2,
	extra3,
	extra4,
	fastForward,
	pause,
	skipFrame,
	exit,
}

enum GamePadAxis {
	invalid,
	leftX,
	leftY,
	rightX,
	rightY,
	triggerLeft,
	triggerRight,
}

enum GamePadButton {
	invalid,
	a,
	b,
	x,
	y,
	back,
	guide,
	start,
	leftStick,
	rightStick,
	leftShoulder,
	rightShoulder,
	dpadUp,
	dpadDown,
	dpadLeft,
	dpadRight,
}

enum KeyboardKey {
	invalid,
	a,
	b,
	c,
	d,
	e,
	f,
	g,
	h,
	i,
	j,
	k,
	l,
	m,
	n,
	o,
	p,
	q,
	r,
	s,
	t,
	u,
	v,
	w,
	x,
	y,
	z,

	number1,
	number2,
	number3,
	number4,
	number5,
	number6,
	number7,
	number8,
	number9,
	number0,

	return_,
	escape,
	backspace,
	tab,
	space,

	minus,
	equals,
	leftBracket,
	rightBracket,
	backSlash,
	nonUSHash,
	semicolon,
	apostrophe,
	grave,
	comma,
	period,
	slash,

	capsLock,

	f1,
	f2,
	f3,
	f4,
	f5,
	f6,
	f7,
	f8,
	f9,
	f10,
	f11,
	f12,

	printScreen,
	scrollLock,
	pause,
	insert,
	home,
	pageUp,
	delete_,
	end,
	pageDown,
	right,
	left,
	down,
	up,

	numLockClear,
	kpDivide,
	kpMultiply,
	kpMinus,
	kpPlus,
	kpEnter,
	kp1,
	kp2,
	kp3,
	kp4,
	kp5,
	kp6,
	kp7,
	kp8,
	kp9,
	kp0,
	kpPeriod,

	nonUSBackslash,
	application,
	power,
	kpEquals,
	f13,
	f14,
	f15,
	f16,
	f17,
	f18,
	f19,
	f20,
	f21,
	f22,
	f23,
	f24,
	execute,
	help,
	menu,
	select,
	stop,
	again,
	undo,
	cut,
	copy,
	paste,
	find,
	mute,
	volumeUp,
	volumeDown,
	kpComma,
	kpEqualsAs400,

	international1,
	international2,
	international3,
	international4,
	international5,
	international6,
	international7,
	international8,
	international9,
	lang1,
	lang2,
	lang3,
	lang4,
	lang5,
	lang6,
	lang7,
	lang8,
	lang9,

	altErase,
	sysReq,
	cancel,
	clear,
	prior,
	return2,
	separator,
	out_,
	oper,
	clearAgain,
	crsel,
	exsel,

	kp00,
	kp000,
	thousandsSeparator,
	decimalSeparator,
	currencyUnit,
	currencySubunit,
	kpLeftParen,
	kpRightParen,
	kpLeftBrace,
	kpRightBrace,
	kpTab,
	kpBackspace,
	kpA,
	kpB,
	kpC,
	kpD,
	kpE,
	kpF,
	kpXOR,
	kpPower,
	kpPercent,
	kpLess,
	kpGreater,
	kpAmpersand,
	kpDblAmpersand,
	kpVerticalBar,
	kpDblVerticalBar,
	kpColon,
	kpHash,
	kpSpace,
	kpAt,
	kpExclam,
	kpMemStore,
	kpMemRecall,
	kpMemClear,
	kpMemAdd,
	kpMemSubtract,
	kpMemMultiply,
	kpMemDivide,
	kpPlusMinus,
	kpClear,
	kpClearEntry,
	kpBinary,
	kpOctal,
	kpDecimal,
	kpHexadecimal,

	lCtrl,
	lShift,
	lAlt,
	lGUI,
	rCtrl,
	rShift,
	rAlt,
	rGUI,

	mode,

	audioNext,
	audioPrev,
	audioStop,
	audioPlay,
	audioMute,
	mediaSelect,
	www,
	mail,
	calculator,
	computer,
	acSearch,
	acHome,
	acBack,
	acForward,
	acStop,
	acRefresh,
	acBookmarks,

	brightnessDown,
	brightnessUp,
	displaySwitch,
	kbdIllumToggle,
	kbdIllumDown,
	kbdIllumUp,
	eject,
	sleep,

	app1,
	app2,
}

enum ControllerMask {
	extra4 = 0x0001,
	extra3 = 0x0002,
	extra2 = 0x0004,
	extra1 = 0x0008,
	r = 0x0010,
	l = 0x0020,
	x = 0x0040,
	a = 0x0080,
	right = 0x0100,
	left = 0x0200,
	down = 0x0400,
	up = 0x0800,
	start = 0x1000,
	select = 0x2000,
	y = 0x4000,
	b = 0x8000,
}

ushort controllerToMask(Controller button) @safe pure {
	switch (button) {
		case Controller.up: return ControllerMask.up;
		case Controller.down: return ControllerMask.down;
		case Controller.left: return ControllerMask.left;
		case Controller.right: return ControllerMask.right;
		case Controller.l: return ControllerMask.l;
		case Controller.r: return ControllerMask.r;
		case Controller.select: return ControllerMask.select;
		case Controller.start: return ControllerMask.start;
		case Controller.a: return ControllerMask.a;
		case Controller.b: return ControllerMask.b;
		case Controller.x: return ControllerMask.x;
		case Controller.y: return ControllerMask.y;
		case Controller.extra1: return ControllerMask.extra1;
		case Controller.extra2: return ControllerMask.extra2;
		case Controller.extra3: return ControllerMask.extra3;
		case Controller.extra4: return ControllerMask.extra4;
		default: assert(0, "No mapping available for this button");
	}
}

ushort controllerAxisToMask(AxisMapping mapping) @safe pure {
	switch (mapping) {
		case AxisMapping.l: return ControllerMask.l;
		case AxisMapping.r: return ControllerMask.r;
		case AxisMapping.select: return ControllerMask.select;
		case AxisMapping.start: return ControllerMask.start;
		case AxisMapping.a: return ControllerMask.a;
		case AxisMapping.b: return ControllerMask.b;
		case AxisMapping.x: return ControllerMask.x;
		case AxisMapping.y: return ControllerMask.y;
		case AxisMapping.extra1: return ControllerMask.extra1;
		case AxisMapping.extra2: return ControllerMask.extra2;
		case AxisMapping.extra3: return ControllerMask.extra3;
		case AxisMapping.extra4: return ControllerMask.extra4;
		default: assert(0, "No mapping available for this button");
	}
}
